[33mcommit 696508c476965aecedb010d570ae5c2eb0dd2232[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: osama530 <osamaqamar93@gmail.com>
Date:   Tue Dec 8 17:42:40 2020 +0500

    task uploaded

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..ea8c4bf[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/target[m
[1mdiff --git a/Cargo.lock b/Cargo.lock[m
[1mnew file mode 100644[m
[1mindex 0000000..06ab4ca[m
[1m--- /dev/null[m
[1m+++ b/Cargo.lock[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m# This file is automatically @generated by Cargo.[m
[32m+[m[32m# It is not intended for manual editing.[m
[32m+[m[32m[[package]][m
[32m+[m[32mname = "id_khan_task"[m
[32m+[m[32mversion = "0.1.0"[m
[1mdiff --git a/Cargo.toml b/Cargo.toml[m
[1mnew file mode 100644[m
[1mindex 0000000..177118d[m
[1m--- /dev/null[m
[1m+++ b/Cargo.toml[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m[package][m
[32m+[m[32mname = "id_khan_task"[m
[32m+[m[32mversion = "0.1.0"[m
[32m+[m[32mauthors = ["osama530 <osamaqamar93@gmail.com>"][m
[32m+[m[32medition = "2018"[m
[32m+[m
[32m+[m[32m# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html[m
[32m+[m
[32m+[m[32m[dependencies][m
[1mdiff --git a/src/main.rs b/src/main.rs[m
[1mnew file mode 100644[m
[1mindex 0000000..9984fdb[m
[1m--- /dev/null[m
[1m+++ b/src/main.rs[m
[36m@@ -0,0 +1,291 @@[m
[32m+[m[32m// use std::io;[m
[32m+[m
[32m+[m[32m// //***********crating a struct to hold our shops details*************//[m
[32m+[m[32m// #[derive(Debug)][m
[32m+[m[32m// struct Shop {[m
[32m+[m[32m//     store_name: String,[m
[32m+[m[32m//     number_of_products: u32,[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// //creating an associated fuction for shop struct[m
[32m+[m[32m// impl Shop {[m
[32m+[m[32m//     fn create(name:String, products: u32)->Shop{[m
[32m+[m[32m//         Shop{[m
[32m+[m[32m//             store_name: name,[m
[32m+[m[32m//             number_of_products: products[m
[32m+[m[32m//         }[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m[32m// //creating a fuction to print shope details[m
[32m+[m[32m// impl Shop {[m
[32m+[m[32m//     fn print_shop_details (&mut self) {[m
[32m+[m[32m//         println!("Name of shop is : {}",self.store_name);[m
[32m+[m[32m//         println!("Number of products in a shop is : {}",self.number_of_products);[m
[32m+[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m// //************creating a struct to hold all the products*************** */[m
[32m+[m[32m// #[derive(Debug)][m
[32m+[m[32m// struct ProductList {[m
[32m+[m[32m//     list: Vec<Product>[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// //crating a associated function for aou list of products[m
[32m+[m[32m// impl ProductList {[m
[32m+[m[32m//     fn create()->ProductList{[m
[32m+[m[32m//         ProductList{[m
[32m+[m[32m//             list: Vec::new()[m
[32m+[m[32m//         }[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// impl ProductList {[m
[32m+[m[32m//     fn print_list(&self, num: Shop){[m
[32m+[m[32m//         let mut index = 0;[m
[32m+[m[32m//         //loop over all the product in a shop[m
[32m+[m[32m//         for item in 0..num.number_of_products {[m
[32m+[m
[32m+[m[32m//             println!("product {} name is : {} ", item, self.list[index].name);[m
[32m+[m[32m//             println!("product {} price is : {} ", item, self.list[index].price);[m
[32m+[m[32m//             println!("product {} quantity is : {} ", item, self.list[index].qty);[m
[32m+[m
[32m+[m[32m//             //space[m
[32m+[m[32m//             println!();[m
[32m+[m[32m//             println!();[m
[32m+[m[32m//             index = index + 1;[m
[32m+[m[32m//         }[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// //********//creating a struct to hold our shop products details***/[m
[32m+[m[32m// #[derive(Debug)][m
[32m+[m[32m// struct Product {[m
[32m+[m[32m//     name: String,[m
[32m+[m[32m//     price: u32,[m
[32m+[m[32m//     qty: u32[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// //creating an associated fuction for product struct[m
[32m+[m[32m// impl Product {[m
[32m+[m[32m//     fn new(name: String, price: u32, qty: u32)->Product{[m
[32m+[m[32m//         Product{[m
[32m+[m[32m//             name,[m
[32m+[m[32m//             price,[m
[32m+[m[32m//             qty[m
[32m+[m[32m//         }[m
[32m+[m[32m//     }[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// fn main() {[m
[32m+[m
[32m+[m[32m//     //get store name from user[m
[32m+[m[32m//     println!("Enter the name of your store:");[m
[32m+[m[32m//     let mut name = String::new();[m
[32m+[m[32m//     io::stdin().read_line(&mut name);[m
[32m+[m[32m//     let name: String = name.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m//     //get number of products from user[m
[32m+[m[32m//     println!("Enter number of products in your stor :");[m
[32m+[m[32m//     let mut num = String::new();[m
[32m+[m[32m//     io::stdin().read_line(&mut num);[m
[32m+[m[32m//     let num: u32 = num.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m//     let mut my_shop = Shop::create(name, num);[m
[32m+[m
[32m+[m[32m//     my_shop.print_shop_details();[m
[32m+[m
[32m+[m[32m//     //Creating an empty list to store all the products[m
[32m+[m[32m//     let mut my_list_of_products = ProductList::create();[m
[32m+[m
[32m+[m[32m//     //collecting all the info of the products[m
[32m+[m[32m//     for item in 0..my_shop.number_of_products {[m
[32m+[m
[32m+[m[32m//         //get product name from user[m
[32m+[m[32m//         println!("Enter the name of product {}:",item);[m
[32m+[m[32m//         let mut name = String::new();[m
[32m+[m[32m//         io::stdin().read_line(&mut name);[m
[32m+[m[32m//         let name: String = name.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m//         //get price of the protuct from user[m
[32m+[m[32m//         println!("Enter price of products {} :",item);[m
[32m+[m[32m//         let mut price = String::new();[m
[32m+[m[32m//         io::stdin().read_line(&mut price);[m
[32m+[m[32m//         let price: u32 = price.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m//         //get quantity of items in stoke from user[m
[32m+[m[32m//         println!("Enter quantity in stoke :");[m
[32m+[m[32m//         let mut qty = String::new();[m
[32m+[m[32m//         io::stdin().read_line(&mut qty);[m
[32m+[m[32m//         let qty: u32 = qty.trim().parse().unwrap();[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m//         //pushing all the products into a vector[m
[32m+[m[32m//         my_list_of_products.list.push(Product::new(name, price, qty));[m
[32m+[m
[32m+[m[32m//     }[m[41m [m
[32m+[m
[32m+[m[32m//     //printing al the product with details in a terminal[m
[32m+[m[32m//     my_list_of_products.print_list(my_shop);[m
[32m+[m[41m   [m
[32m+[m[41m    [m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m//*****************************TASK 6*********************************/[m
[32m+[m[32muse std::io;[m
[32m+[m
[32m+[m[32m//***********crating a struct to hold our shops details*************//[m
[32m+[m[32m#[derive(Debug)][m
[32m+[m[32mstruct Shop {[m
[32m+[m[32m    store_name: String,[m
[32m+[m[32m    number_of_products: u32,[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//creating an associated fuction for shop struct[m
[32m+[m[32mimpl Shop {[m
[32m+[m[32m    fn create(name:String, products: u32)->Shop{[m
[32m+[m[32m        Shop{[m
[32m+[m[32m            store_name: name,[m
[32m+[m[32m            number_of_products: products[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m[32m//creating a fuction to print shope details[m
[32m+[m[32mimpl Shop {[m
[32m+[m[32m    fn print_shop_details (&mut self) {[m
[32m+[m[32m        println!("Name of shop is : {}",self.store_name);[m
[32m+[m[32m        println!("Number of products in a shop is : {}",self.number_of_products);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m//************creating a struct to hold all the products*************** */[m
[32m+[m[32m#[derive(Debug)][m
[32m+[m[32mstruct ProductList {[m
[32m+[m[32m    list: Vec<Product>[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//crating a associated function for aou list of products[m
[32m+[m[32mimpl ProductList {[m
[32m+[m[32m    fn create()->ProductList{[m
[32m+[m[32m        ProductList{[m
[32m+[m[32m            list: Vec::new()[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mimpl ProductList {[m
[32m+[m[32m    fn print_list(&self){[m
[32m+[m[32m        for (index, item) in self.list.iter().enumerate() {[m
[32m+[m[32m            println!("code of product : {}", self.list[index].code);[m
[32m+[m[32m            println!("name of product : {}", self.list[index].name);[m
[32m+[m[32m            println!("price of product : {}", self.list[index].price);[m
[32m+[m[32m            println!("quantity in stock : {}", self.list[index].qty);[m
[32m+[m[32m            println!("");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    fn add_product(&mut self){[m
[32m+[m
[32m+[m[32m        //get product name from user[m
[32m+[m[32m        println!("Enter the code of product :");[m
[32m+[m[32m        let mut code = String::new();[m
[32m+[m[32m        io::stdin().read_line(&mut code);[m
[32m+[m[32m        let code: String = code.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m        //get product name from user[m
[32m+[m[32m        println!("Enter the name of product :");[m
[32m+[m[32m        let mut name = String::new();[m
[32m+[m[32m        io::stdin().read_line(&mut name);[m
[32m+[m[32m        let name: String = name.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m        //get price of the protuct from user[m
[32m+[m[32m        println!("Enter price of products :");[m
[32m+[m[32m        let mut price = String::new();[m
[32m+[m[32m        io::stdin().read_line(&mut price);[m
[32m+[m[32m        let price: u32 = price.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m        //get quantity of items in stoke from user[m
[32m+[m[32m        println!("Enter quantity in stoke :");[m
[32m+[m[32m        let mut qty = String::new();[m
[32m+[m[32m        io::stdin().read_line(&mut qty);[m
[32m+[m[32m        let qty: u32 = qty.trim().parse().unwrap();[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        //pushing the product into a vector[m
[32m+[m[32m        self.list.push(Product::new(code, name, price, qty));[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//********//creating a struct to hold our shop products details***/[m
[32m+[m[32m#[derive(Debug)][m
[32m+[m[32mstruct Product {[m
[32m+[m[32m    code: String,[m
[32m+[m[32m    name: String,[m
[32m+[m[32m    price: u32,[m
[32m+[m[32m    qty: u32[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//creating an associated fuction for product struct[m
[32m+[m[32mimpl Product {[m
[32m+[m[32m    fn new(code: String,name: String, price: u32, qty: u32)->Product{[m
[32m+[m[32m        Product{[m
[32m+[m[32m            code,[m
[32m+[m[32m            name,[m
[32m+[m[32m            price,[m
[32m+[m[32m            qty[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfn main() {[m
[32m+[m
[32m+[m[32m    //get store name from user[m
[32m+[m[32m    println!("Enter the name of your store:");[m
[32m+[m[32m    let mut name = String::new();[m
[32m+[m[32m    io::stdin().read_line(&mut name);[m
[32m+[m[32m    let name: String = name.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m    //get number of products from user[m
[32m+[m[32m    println!("Enter number of products in your stor :");[m
[32m+[m[32m    let mut num = String::new();[m
[32m+[m[32m    io::stdin().read_line(&mut num);[m
[32m+[m[32m    let num: u32 = num.trim().parse().unwrap();[m
[32m+[m[41m  [m
[32m+[m[32m    let mut my_shop = Shop::create(name, num);[m
[32m+[m
[32m+[m[32m    my_shop.print_shop_details();[m[41m [m
[32m+[m
[32m+[m[32m    //creat an instance of empty list[m
[32m+[m[32m    let mut my_list_of_products = ProductList::create();[m
[32m+[m
[32m+[m[32m    let mut flag = 0;[m
[32m+[m[32m    while flag != 3 {[m
[32m+[m[32m        //ucommand line user interface[m
[32m+[m[32m        println!("");[m
[32m+[m[32m        println!("*****Select from the menu******");[m
[32m+[m[32m        println!("");[m
[32m+[m[32m        println!("1. Add New Product");[m
[32m+[m[32m        println!("2. Show All  Products");[m
[32m+[m[32m        println!("3. Exit");[m
[32m+[m[32m        let mut command = String::new();[m
[32m+[m[32m        io::stdin().read_line(&mut command);[m
[32m+[m[32m        let command: u32 = command.trim().parse().unwrap();[m
[32m+[m
[32m+[m[32m        match command {[m
[32m+[m[32m            1 =>  my_list_of_products.add_product(),[m
[32m+[m[32m            2 => my_list_of_products.print_list(),[m
[32m+[m[32m            3 => {[m
[32m+[m[32m                    println!("Exiting...Thank You");[m
[32m+[m[32m                    flag=3; },[m
[32m+[m[32m            _ => println!("please enter a valid command")[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m}[m
\ No newline at end of file[m
